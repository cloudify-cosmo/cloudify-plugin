<?xml version="1.1" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.37">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>sdlc_type</string>
        <string>deployment_id</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>sdlc_type</name>
          <description>SDLC stage to deploy for</description>
          <choices>
            <string>qa</string>
            <string>production</string>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>deployment_id</name>
          <description>Name of environment to create</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>pipeline {
    agent any
    
    parameters {
        choice(name: 'sdlc_type', choices: ['qa', 'production'], description: 'SDLC stage to deploy for')
        string(name: 'deployment_id', description: 'Name of environment to create', trim: true)
    }
    stages {
        stage('Build Cloudify Environment') {
            steps {
                script {
                    switch(params['sdlc_type']) {
                        case 'qa':
                            def infra_blueprint = 'aws-terraform'
                            break
                        case 'production':
                            def infra_blueprint = 'openstack'
                            break
                        default:
                            throw new Exception("Unhandled value: " + params['sdlc_type'])
                    }
                }
                echo infra_blueprint
                // createCloudifyEnv blueprintId: "mc-jboss",
                //     deploymentId: "${params.deployment_id}",
                //     inputs: "{ }"
                //     echoOutputs: true,
                //     outputFile: 'outputs.json'
            }
        }
        stage('Wait for Input') {
            steps {
                // input message: 'Proceed'
                echo "Ba"
            }
        }
        stage('Delete Cloudify Environment') {
            steps {
                echo "Boo"
                // deleteCloudifyEnv deploymentId: "${params.deployment_id}"
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>