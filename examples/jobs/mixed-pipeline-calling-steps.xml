<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.1">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>arm_resource_group</string>
        <string>environment_prefix</string>
        <string>cfn_template_url</string>
        <string>kubernetes_master</string>
        <string>aws_credentials</string>
        <string>arm_template_url</string>
        <string>azure_credentials</string>
        <string>tf_template_url</string>
        <string>cfn_template_vars</string>
        <string>cfn_stack_name</string>
        <string>tf_template_vars</string>
        <string>cfy_credentials</string>
        <string>arm_template_vars</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@2.3.11">
          <name>cfy_credentials</name>
          <description>Cloudify credentials</description>
          <defaultValue></defaultValue>
          <credentialType>com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@2.3.11">
          <name>aws_credentials</name>
          <description>AWS credentials</description>
          <defaultValue></defaultValue>
          <credentialType>com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@2.3.11">
          <name>azure_credentials</name>
          <description>Azure credentials</description>
          <defaultValue></defaultValue>
          <credentialType>com.microsoft.azure.util.AzureCredentials</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_prefix</name>
          <description>Environment identifier prefix</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>tf_template_url</name>
          <description>URL of the Terraform template archive</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>tf_template_vars</name>
          <description>Terraform template variables (as YAML or JSON)</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cfn_stack_name</name>
          <description>CloudFormation stack name to create</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cfn_template_url</name>
          <description>URL of the CloudFormation template</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>cfn_template_vars</name>
          <description>CloudFormation template variables (as YAML or JSON)</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>arm_template_url</name>
          <description>URL of the ARM template</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>arm_template_vars</name>
          <description>ARM template variables (as YAML or JSON)</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>arm_resource_group</name>
          <description>Resource group to create on Azure</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>kubernetes_master</name>
          <description>Kubernetes master host</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.82">
    <script>pipeline {
    agent any
    
    parameters {
        credentials(
            credentialType: &apos;com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl&apos;,
            defaultValue: &apos;&apos;,
            description: &apos;Cloudify credentials&apos;,
            name: &apos;cfy_credentials&apos;,
            required: true)
        credentials(
            credentialType: &apos;com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl&apos;,
            defaultValue: &apos;&apos;,
            description: &apos;AWS credentials&apos;,
            name: &apos;aws_credentials&apos;,
            required: true)
        credentials(
            credentialType: &apos;com.microsoft.azure.util.AzureCredentials&apos;,
            defaultValue: &apos;&apos;, 
            description: &apos;Azure credentials&apos;,
            name: &apos;azure_credentials&apos;,
            required: true)
        string(name: &apos;environment_prefix&apos;, description: &apos;Environment identifier prefix&apos;, trim: true)
        string(name: &apos;tf_template_url&apos;, description: &apos;URL of the Terraform template archive&apos;, trim: true)
        text(name: &apos;tf_template_vars&apos;, description: &apos;Terraform template variables (as YAML or JSON)&apos;)
        string(name: &apos;cfn_stack_name&apos;, description: &apos;CloudFormation stack name to create&apos;, trim: true)
        string(name: &apos;cfn_template_url&apos;, description: &apos;URL of the CloudFormation template&apos;, trim: true)
        text(name: &apos;cfn_template_vars&apos;, description: &apos;CloudFormation template variables (as YAML or JSON)&apos;)
        string(name: &apos;arm_template_url&apos;, description: &apos;URL of the ARM template&apos;, trim: true)
        text(name: &apos;arm_template_vars&apos;, description: &apos;ARM template variables (as YAML or JSON)&apos;)
        string(name: &apos;arm_resource_group&apos;, description: &apos;Resource group to create on Azure&apos;, trim: true)
        string(name: &apos;kubernetes_master&apos;, description: &apos;Kubernetes master host&apos;, trim: true)
    }

    stages {
        stage(&apos;Build Cloudify Environments&apos;) {
            parallel {
                stage(&apos;AWS using Terraform&apos;) {
                    steps {
                        script {
                            def template_vars_map = readYaml text: &quot;${params.tf_template_vars}&quot;
                            
                            withCredentials([[
                                $class: &apos;AmazonWebServicesCredentialsBinding&apos;,
                                accessKeyVariable: &apos;AWS_ACCESS_KEY_ID&apos;,
                                credentialsId: &quot;${params.aws_credentials}&quot;,
                                secretKeyVariable: &apos;AWS_SECRET_ACCESS_KEY&apos;]]) {
                                    
                                template_vars_map[&apos;access_key&apos;] = &quot;${AWS_ACCESS_KEY_ID}&quot;
                                template_vars_map[&apos;secret_key&apos;] = &quot;${AWS_SECRET_ACCESS_KEY}&quot;
                                
                                cfyTerraform credentialsId: &quot;${params.cfy_credentials}&quot;,
                                    deploymentId: &quot;${params.environment_prefix}_tf&quot;,
                                    echoInputs: false,
                                    echoEnvData: true,
                                    envDataLocation: &apos;env-data-tf.json&apos;,
                                    templateUrl: &quot;${params.tf_template_url}&quot;,
                                    variables: template_vars_map
                            }
                        }
                    }
                }
                stage(&apos;AWS using Cloudformation&apos;) {
                    steps {
                        script {
                            def cfn_template_vars_map = readYaml text: &quot;${params.cfn_template_vars}&quot;

                            cfyCloudFormation credentialsId: &quot;${params.cfy_credentials}&quot;,
                                awsCredentialsId: &quot;${params.aws_credentials}&quot;,
                                deploymentId: &quot;${params.environment_prefix}_cfn&quot;,
                                echoEnvData: true,
                                envDataLocation: &apos;env-data-cfn.json&apos;,
                                parameters: cfn_template_vars_map,
                                stackName: &quot;${params.cfn_stack_name}&quot;,
                                templateUrl: &quot;${params.cfn_template_url}&quot;
                        }
                    }
                }
                stage(&apos;Azure using ARM&apos;) {
                    steps {
                        script {
                            def arm_template_vars_map = readYaml text: &quot;${params.arm_template_vars}&quot;

                            cfyAzureArm credentialsId: &quot;${params.cfy_credentials}&quot;,
                                azureCredentialsId: &quot;${params.azure_credentials}&quot;,
                                deploymentId: &quot;${params.environment_prefix}_arm&quot;,
                                echoEnvData: true,
                                envDataLocation: &apos;env-arm.json&apos;,
                                parameters: arm_template_vars_map,
                                resourceGroupName: &quot;${params.arm_resource_group}&quot;,
                                templateFile: &quot;${params.arm_template_url}&quot;
                        }
                    }
                }
                stage(&apos;Kubernetes&apos;) {
                    steps {
                        cfyKubernetes k8sMaster: &quot;${params.kubernetes_master}&quot;,
                            apiKeyCredentialsId: &quot;&quot;,
                            apiOptions: apiOptions,
                            definitionFile: &quot;&quot;,
                            options: options
                            
                        script {
                            def arm_template_vars_map = readYaml text: &quot;${params.arm_template_vars}&quot;

                            cfyAzureArm credentialsId: &quot;${params.cfy_credentials}&quot;,
                                azureCredentialsId: &quot;${params.azure_credentials}&quot;,
                                deploymentId: &quot;${params.environment_prefix}_arm&quot;,
                                echoEnvData: true,
                                envDataLocation: &apos;env-arm.json&apos;,
                                parameters: arm_template_vars_map,
                                resourceGroupName: &quot;${params.arm_resource_group}&quot;,
                                templateFile: &quot;${params.arm_template_url}&quot;
                        }
                    }
                }
            }
        }
        stage(&apos;Run tests&apos;) {
            steps {
                input message: &apos;Proceed?&apos;
            }
        }
        stage(&apos;Destroy Cloudify Environments&apos;) {
            parallel {
                stage(&apos;Destroy Terraform environment&apos;) {
                    steps {
                        deleteCloudifyEnv credentialsId: &quot;${params.cfy_credentials}&quot;,
                            deleteBlueprintIfLast: false,
                            deploymentId: &quot;${params.environment_prefix}_tf&quot;,
                            ignoreFailure: false
                    }
                }
                stage(&apos;Destroy CloudFormation environment&apos;) {
                    steps {
                        deleteCloudifyEnv credentialsId: &quot;${params.cfy_credentials}&quot;,
                            deleteBlueprintIfLast: false,
                            deploymentId: &quot;${params.environment_prefix}_cfn&quot;,
                            ignoreFailure: false
                    }
                }
                stage(&apos;Destroy Azure ARM environment&apos;) {
                    steps {
                        deleteCloudifyEnv credentialsId: &quot;${params.cfy_credentials}&quot;,
                            deleteBlueprintIfLast: false,
                            deploymentId: &quot;${params.environment_prefix}_arm&quot;,
                            ignoreFailure: false
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>